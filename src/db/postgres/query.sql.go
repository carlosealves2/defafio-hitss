// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package postgres

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, surname, contact, address, birth, cpf)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, surname, contact, address, birth, cpf
`

type CreateUserParams struct {
	Name    string
	Surname string
	Contact string
	Address string
	Birth   time.Time
	Cpf     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Surname,
		arg.Contact,
		arg.Address,
		arg.Birth,
		arg.Cpf,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Contact,
		&i.Address,
		&i.Birth,
		&i.Cpf,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, surname, contact, address, birth, cpf FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Contact,
		&i.Address,
		&i.Birth,
		&i.Cpf,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, surname, contact, address, birth, cpf FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Contact,
			&i.Address,
			&i.Birth,
			&i.Cpf,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users set
                 name = $2,
                 surname = $3,
                 contact = $4,
                 address = $5,
                 birth = $6,
                 cpf = $7
WHERE id = $1
RETURNING id, name, surname, contact, address, birth, cpf
`

type UpdateUserParams struct {
	ID      int64
	Name    string
	Surname string
	Contact string
	Address string
	Birth   time.Time
	Cpf     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Contact,
		arg.Address,
		arg.Birth,
		arg.Cpf,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Contact,
		&i.Address,
		&i.Birth,
		&i.Cpf,
	)
	return i, err
}
